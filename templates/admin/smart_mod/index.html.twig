{% extends 'admin/base.html.twig' %}

{% block title %}Smart Modules lists{% endblock %}

{% block breadcrumbItem %}
<li class="breadcrumb-item"><a href="javascript:void(0);">Smart Modules</a></li>
<li class="breadcrumb-item active">Lists</li>
{% endblock %}

{% block pageTitle %}Home{% endblock %}

{% block body %}
    <h1>Smart Modules lists</h1>
    <div class="mt-2 mb-2 mr-5 text-right">
        <a href="{{ path('admin_smartMod_new') }}" class="btn btn-soft-primary rounded waves-effect " data-toggle="tooltip" data-placement="top" title="Add new smart Module ?"><i class="fa fa-plus-circle mr-2"></i>Add</a>
    </div>

    <table id="datatable-buttons" class="table table-striped table-bordered dt-responsive nowrap" style="border-collapse: collapse; border-spacing: 0; width: 100%;">
        <thead>
            <tr class="text-center">
                {# <th>Id</th> #}
                <th>Name</th>
                <th>ModuleId</th>
                <th>Type</th>
                <th>Level Zone</th>
                <th>SubType</th>
                <th>Fuel Price</th>
                <th>Nb phasis</th>
                <th>Enterprise</th>
                <th>Site</th>
                <th>Connexion Status</th>
                <th>actions</th>
            </tr>
        </thead>
        <tbody>
        {% for smartMod in smartMods %}
            <tr class="text-center">
                {# <td>{{ smartMod.id }}</td> #}
                <td>{{ smartMod.name }}</td>
                <td>{{ smartMod.moduleId }}</td>
                <td>{{ smartMod.modType }}</td>
                <td>{{ smartMod.levelZone ?? '-' }}</td>
                <td>{{ smartMod.subType ?? '-' }}</td>
                <td>{{ smartMod.fuelPrice ?? '-' }}</td>
                <td>{{ smartMod.nbPhases ?? '-' }}</td>
                <td>{{ smartMod.enterprise.socialReason }}</td>
                <td>{{ smartMod.site.name ?? '-' }}</td>
                <td><i class="fas fa-circle text-danger conn" id="connexionStatus-{{smartMod.id}}"></i></td>
                <td>
                    <form method="post" action="{{ path('admin_smartMod_delete', {'id': smartMod.id}) }}" onsubmit="return confirm('Do really want to delete smart Module << {{smartMod.name}} >> ?');">
                        <a href="{{ path('admin_smartMod_edit', {'id': smartMod.id}) }}" class="btn btn-soft-primary btn-xs rounded waves-effect mr-2" data-toggle="tooltip" data-placement="top" title="Edit smart Module ?"><i class="far fa-edit mr-2"></i>Edit</a>
                        <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ smartMod.id) }}">
                        <button class="btn btn-soft-danger btn-xs rounded waves-effect mt-1 mr-2" data-toggle="tooltip" data-placement="top" title="Delete smart Module ?"><i class="mdi mdi-trash-can-outline mr-2"></i>Delete</button>
                    </form>
                </td>
            </tr>
        {% endfor %}
        </tbody>
    </table>

    {# <div class="row"> #}
        <div class="card">
            <div class="card-header ">
                <h6>Remotely Console Log</h6>
                <form class="form-inline justify-content-end">
                    <button class="button btn btn-primary btn-sm " id="clearConsole" type="button" style=" cursor : pointer;"><i class="fa fa-trash-alt"></i></button>
                </form>
            </div>
            <div class="card-body">
                <textarea class="form-control mt-15" id="console" placeholder="" rows="20" readonly></textarea>

            </div><!--end card-body-->
        </div><!--end card-->
    {# </div> #}
    {# <a href="{{ path('smartMod_new') }}">Create new</a> #}
{% endblock %}

{% block javascripts %}
<script src="/js/mqttws31.js" type="text/javascript"></script>
<script>
    /*var print_first = pipe('#first', function(data) {
        message = new Paho.MQTT.Message(data);
        //message.destinationName = "test/all";
        message.destinationName = "to/device/esp/3164842";
        console.log("SEND ON " + message.destinationName + " PAYLOAD " + data);
        client.send(message);
    });*/
    $('#clearConsole').click(function () {
        $('#console').val("");
    });
    var mess = {
        From: "user",
        To: "Devices",
        Object: "Connexion Status",
        message: ""
    };

    var isConnected = false;
    var wsbroker = "192.168.10.40";//location.hostname;  //mqtt websocket enabled broker
    var wsport = 15675; // port for above 1883

    var client = new Paho.MQTT.Client(wsbroker, wsport, "/ws",
        "admin_{{app.user.id}}");

    client.onConnectionLost = function (responseObject) {
        isConnected = false;
        console.log("CONNECTION LOST - " + responseObject.errorMessage);
    };

    client.onMessageArrived = function (message) {
        console.log("RECEIVE ON " + message.destinationName + " PAYLOAD " + message.payloadString);
        //print_first(message.payloadString);
        var result;
        var parse = true;
        try {
            result = JSON.parse(message.payloadString);
        } catch (e) {
            parse = false;
            console.error("Parsing error:", e);
        }

        if(parse){
            console.log("Received: " + message.payloadString);
            var str = String(message.payloadString);
            //console.log("str: " + str);
            if (str.indexOf("{\"From\":") >= 0) {
                //var json = JSON.parse(message.payloadString);
                //console.log("json : " + json);
                //$("#" + json.To).prop('checked', parseInt(json.message));
                //$("#" + key).closest("label").addClass("checked");
                //console.log(parseInt(json.message));
                var status;

                switch (result.To) {
                    case "user":
                        if (result.Object === "Device Output Status") {
                            status = (parseInt(result.message) === 1) ? true : false;
                            //$('#' + result.To).closest("label").toggleClass("checked", status);
                            $("#" + result.From).prop('checked', status);
                            if (status) {
                                $('[data-unit="' + result.From + '"]').toggleClass("active");
                                $("#" + result.From).closest("label").addClass("checked");
                            }
                            else {
                                $('[data-unit="' + result.From + '"]').removeClass("active");
                                $("#" + result.From).closest("label").removeClass("checked");
                            }
                        }
                        else if (result.Object === "Connexion Status") {
                            var id = "#connexionStatus-" + result.From
                            updateAlarmStatus($(id), 1);
                            //Get the device's output status
                            {# mess.Object = "Device Output Status";
                            mess.To = "Devices";
                            doSend(JSON.stringify(mess));

                            //Get the ac-device's remaining time
                            mess.Object = "Remaining Time";
                            mess.To = "Devices";
                            doSend(JSON.stringify(mess)); #}

                            {# //Set ON/OFF Real Time Data Mode
                            if (DataON) mess.Object = "Real Time Data ON";
                            else mess.Object = "Real Time Data OFF";
                            mess.To = "Devices";
                            doSend(JSON.stringify(mess)); #}
                        }
                        {# else if (result.Object === "Remaining Time") {//Init the remaining time countdown
                            var TimeInMs = parseInt(result.message);
                            var id = result.From;
                            acTimer(id, TimeInMs);
                        } #}
                        else if (result.Object === "Device Time's Clock") {//Display the device time's clock
                            var id = result.From;
                            $('#CLK_' + id).html(result.message);
                        }
                        else if (result.Object === "Setting Device's Clock") {//Feed-Back des devices sur la config de l'horloge

                            $('.notifsModal').append('<div class="alert alert-' + result.state + ' alert-dismissible fade show border-0" role="alert"><button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>' + result.message + '</div>').ready(() => {
                                // Notifications "Close" callback - hide modal and alert indicator dot when user closes all alerts
                                $('#notifsModal .alert').on('close.bs.alert', function () {
                                    var nbAlert = parseInt($('#notifsModal div.alert').length) - 1;
                                    console.log('nb alert = ' + nbAlert);
                                    nbAlert = nbAlert - 1;
                                    $('#notifs-toggler').attr('data-alerts', nbAlert);
                                    nbAlert = nbAlert + 1;

                                    if (parseInt(nbAlert) === 0) {
                                        $('#notifsModal').modal('hide');
                                        console.log('nb alert = ' + nbAlert);
                                        // $('#notifs-toggler').attr('data-toggle', 'none');
                                        $('#notifs-toggler').addClass('d-none');

                                    }

                                });
                            })
                            $('#notifs-toggler').removeClass('d-none');
                            $('#notifsModal').modal('hide');
                            $('#notifsModal').modal('show');

                        }
                        else if (result.Object === "Log") {//Feed-Back des devices sur la config de l'horloge
                            $('#console').val($('#console').val() + "\n" + str);
                            {# var id = result.From;
                            $("#Voltage-" + id).html(result.message.V);
                            $("#Current-" + id).html(result.message.I);
                            $("#Power-" + id).html(result.message.P); #}
                        }
                        break;
                    default:
                        break;
                }
            }
        }
    };

        {# "mqtt-ESP-device","mqtt-test", #}
        {# "mqtt-ESP-device","mqtt-test", #}
        var options = {
        timeout: 3,
        keepAliveInterval: 30,
        userName: "mqtt-ESP-device",
        password: "mqtt-ESP-device",
        onSuccess: function () {
            isConnected = true;
            console.log("CONNECTION SUCCESS");
            client.subscribe("test/all", {qos: 1});
            client.subscribe("from/device/esp/#", {qos: 1});
        },
        onFailure: function (message) {
            console.log("CONNECTION FAILURE - " + message.errorMessage);
        }
    };

    if (location.protocol == "https:") {
        options.useSSL = true;
    }
    console.log("CONNECT TO " + wsbroker + ":" + wsport);
    client.connect(options);
    // Try to reconnect after a few seconds
    setInterval(function () {
        if(isConnected === false){
            console.log("CONNECT TO " + wsbroker + ":" + wsport);
            client.connect(options);
        }
        else{

        } 
    }, 10000);
</script>
{% endblock %}